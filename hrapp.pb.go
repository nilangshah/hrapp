// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hrapp.proto

/*
Package hrapp is a generated protocol buffer package.

It is generated from these files:
	hrapp.proto

It has these top-level messages:
	EmployeeId
	Employee
*/
package hrapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmployeeId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EmployeeId) Reset()                    { *m = EmployeeId{} }
func (m *EmployeeId) String() string            { return proto.CompactTextString(m) }
func (*EmployeeId) ProtoMessage()               {}
func (*EmployeeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EmployeeId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Employee struct {
	Id      int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Title   string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Reports []int64 `protobuf:"varint,4,rep,packed,name=reports" json:"reports,omitempty"`
}

func (m *Employee) Reset()                    { *m = Employee{} }
func (m *Employee) String() string            { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()               {}
func (*Employee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Employee) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Employee) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Employee) GetReports() []int64 {
	if m != nil {
		return m.Reports
	}
	return nil
}

func init() {
	proto.RegisterType((*EmployeeId)(nil), "EmployeeId")
	proto.RegisterType((*Employee)(nil), "Employee")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hrapp service

type HrappClient interface {
	GetEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*Employee, error)
}

type hrappClient struct {
	cc *grpc.ClientConn
}

func NewHrappClient(cc *grpc.ClientConn) HrappClient {
	return &hrappClient{cc}
}

func (c *hrappClient) GetEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := grpc.Invoke(ctx, "/hrapp/getEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hrapp service

type HrappServer interface {
	GetEmployee(context.Context, *EmployeeId) (*Employee, error)
}

func RegisterHrappServer(s *grpc.Server, srv HrappServer) {
	s.RegisterService(&_Hrapp_serviceDesc, srv)
}

func _Hrapp_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrappServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hrapp/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrappServer).GetEmployee(ctx, req.(*EmployeeId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hrapp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hrapp",
	HandlerType: (*HrappServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEmployee",
			Handler:    _Hrapp_GetEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hrapp.proto",
}

func init() { proto.RegisterFile("hrapp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x28, 0x4a, 0x2c,
	0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe1, 0xe2, 0x72, 0xcd, 0x2d, 0xc8, 0xc9,
	0xaf, 0x4c, 0x4d, 0xf5, 0x4c, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0e, 0x62, 0xca, 0x4c, 0x51, 0x8a, 0xe3, 0xe2, 0x80, 0xc9, 0xa2, 0xcb, 0x09, 0x09, 0x71,
	0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0x22,
	0x5c, 0xac, 0x25, 0x99, 0x25, 0x39, 0xa9, 0x12, 0xcc, 0x60, 0x41, 0x08, 0x47, 0x48, 0x82, 0x8b,
	0xbd, 0x28, 0xb5, 0x20, 0xbf, 0xa8, 0xa4, 0x58, 0x82, 0x45, 0x81, 0x59, 0x83, 0x39, 0x08, 0xc6,
	0x35, 0xd2, 0xe3, 0x62, 0x05, 0x3b, 0x46, 0x48, 0x95, 0x8b, 0x3b, 0x3d, 0xb5, 0x04, 0x6e, 0x17,
	0xb7, 0x1e, 0xc2, 0x51, 0x52, 0x9c, 0x70, 0x4e, 0x12, 0x1b, 0xd8, 0xd1, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0x26, 0x9a, 0x55, 0xc3, 0x00, 0x00, 0x00,
}
