package hrapp

import (
	"context"
	c "github.com/nilangshah/hrapp/cassandra"
	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	"go.uber.org/zap"
	"google.golang.org/grpc"
)

var (
	grpcReqs *prometheus.CounterVec
)

type ServiceImpl struct {
	logger      *zap.Logger
	serviceDesc grpc.ServiceDesc
	Config      *ServiceImplConfig
	empStore    EmployeeStore
}

type ServiceImplConfig struct {
	DBConfig *c.CassandraConfig
}

func NewServiceImpl(config *ServiceImplConfig) *ServiceImpl {
	return &ServiceImpl{serviceDesc: _Hrapp_serviceDesc, Config: config}
}

//ServiceDesc() returns the GRPC service description generated by the proto file
func (s *ServiceImpl) ServiceDesc() *grpc.ServiceDesc {
	return &s.serviceDesc
}

//Init method to eager initialize dependencies
func (s *ServiceImpl) Init(logger *zap.Logger) error {
	s.logger = logger
	s.logger.Info("Initializing serviceImpl")
	empStore, err := EmployeeStoreInit(s.logger, s.Config.DBConfig)
	if err != nil {
		return errors.Wrap(err, "EmployeeDB initialization failed")
	}
	s.empStore = empStore
	grpcReqs = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "grpc_requests_total",
			Help: "How many gRPC requests processed, partitioned by status code and HTTP method.",
		},
		[]string{"code", "method"},
	)
	prometheus.MustRegister(grpcReqs)
	return nil
}

//Called when admin, gRPC server is running and healthy
func (s *ServiceImpl) Run() {
	s.logger.Info("Running	 serviceImpl")
}

//Graceful shutdown and cleanup
func (s *ServiceImpl) ShutDown() {
	s.logger.Info("Shutting down serviceImpl")
	s.empStore.Close()
}

// Function to implement Business API
func (s *ServiceImpl) GetEmployee(ctx context.Context, id *EmployeeId) (*Employee, error) {
	s.logger.Debug("gRPC: GetEmployee called", zap.Int64("empId", id.Id))
	grpcReqs.WithLabelValues("200", "getemployee").Inc()
	return s.empStore.GetEmployee(id)

}
