// Code generated by MockGen. DO NOT EDIT.
// Source: cassandra/cassandra.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/nilangshah/hrapp/cassandra"
	reflect "reflect"
)

// MockSessionInterface is a mock of SessionInterface interface
type MockSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionInterfaceMockRecorder
}

// MockSessionInterfaceMockRecorder is the mock recorder for MockSessionInterface
type MockSessionInterfaceMockRecorder struct {
	mock *MockSessionInterface
}

// NewMockSessionInterface creates a new mock instance
func NewMockSessionInterface(ctrl *gomock.Controller) *MockSessionInterface {
	mock := &MockSessionInterface{ctrl: ctrl}
	mock.recorder = &MockSessionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionInterface) EXPECT() *MockSessionInterfaceMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockSessionInterface) Query(arg0 string, arg1 ...interface{}) cassandra.QueryInterface {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(cassandra.QueryInterface)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockSessionInterfaceMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSessionInterface)(nil).Query), varargs...)
}

// SetPageSize mocks base method
func (m *MockSessionInterface) SetPageSize(arg0 int) {
	m.ctrl.Call(m, "SetPageSize", arg0)
}

// SetPageSize indicates an expected call of SetPageSize
func (mr *MockSessionInterfaceMockRecorder) SetPageSize(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPageSize", reflect.TypeOf((*MockSessionInterface)(nil).SetPageSize), arg0)
}

// Close mocks base method
func (m *MockSessionInterface) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSessionInterfaceMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSessionInterface)(nil).Close))
}

// Health mocks base method
func (m *MockSessionInterface) Health() bool {
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockSessionInterfaceMockRecorder) Health() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockSessionInterface)(nil).Health))
}

// MockQueryInterface is a mock of QueryInterface interface
type MockQueryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQueryInterfaceMockRecorder
}

// MockQueryInterfaceMockRecorder is the mock recorder for MockQueryInterface
type MockQueryInterfaceMockRecorder struct {
	mock *MockQueryInterface
}

// NewMockQueryInterface creates a new mock instance
func NewMockQueryInterface(ctrl *gomock.Controller) *MockQueryInterface {
	mock := &MockQueryInterface{ctrl: ctrl}
	mock.recorder = &MockQueryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryInterface) EXPECT() *MockQueryInterfaceMockRecorder {
	return m.recorder
}

// Bind mocks base method
func (m *MockQueryInterface) Bind(arg0 ...interface{}) cassandra.QueryInterface {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bind", varargs...)
	ret0, _ := ret[0].(cassandra.QueryInterface)
	return ret0
}

// Bind indicates an expected call of Bind
func (mr *MockQueryInterfaceMockRecorder) Bind(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockQueryInterface)(nil).Bind), arg0...)
}

// Exec mocks base method
func (m *MockQueryInterface) Exec() error {
	ret := m.ctrl.Call(m, "Exec")
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockQueryInterfaceMockRecorder) Exec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryInterface)(nil).Exec))
}

// Iter mocks base method
func (m *MockQueryInterface) Iter() cassandra.IterInterface {
	ret := m.ctrl.Call(m, "Iter")
	ret0, _ := ret[0].(cassandra.IterInterface)
	return ret0
}

// Iter indicates an expected call of Iter
func (mr *MockQueryInterfaceMockRecorder) Iter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iter", reflect.TypeOf((*MockQueryInterface)(nil).Iter))
}

// Scan mocks base method
func (m *MockQueryInterface) Scan(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockQueryInterfaceMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockQueryInterface)(nil).Scan), arg0...)
}

// MockIterInterface is a mock of IterInterface interface
type MockIterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIterInterfaceMockRecorder
}

// MockIterInterfaceMockRecorder is the mock recorder for MockIterInterface
type MockIterInterfaceMockRecorder struct {
	mock *MockIterInterface
}

// NewMockIterInterface creates a new mock instance
func NewMockIterInterface(ctrl *gomock.Controller) *MockIterInterface {
	mock := &MockIterInterface{ctrl: ctrl}
	mock.recorder = &MockIterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIterInterface) EXPECT() *MockIterInterfaceMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockIterInterface) Scan(arg0 ...interface{}) bool {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockIterInterfaceMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockIterInterface)(nil).Scan), arg0...)
}

// Close mocks base method
func (m *MockIterInterface) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIterInterfaceMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIterInterface)(nil).Close))
}

// MockBatchInterface is a mock of BatchInterface interface
type MockBatchInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBatchInterfaceMockRecorder
}

// MockBatchInterfaceMockRecorder is the mock recorder for MockBatchInterface
type MockBatchInterfaceMockRecorder struct {
	mock *MockBatchInterface
}

// NewMockBatchInterface creates a new mock instance
func NewMockBatchInterface(ctrl *gomock.Controller) *MockBatchInterface {
	mock := &MockBatchInterface{ctrl: ctrl}
	mock.recorder = &MockBatchInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchInterface) EXPECT() *MockBatchInterfaceMockRecorder {
	return m.recorder
}

// ExecuteBatch mocks base method
func (m *MockBatchInterface) ExecuteBatch() error {
	ret := m.ctrl.Call(m, "ExecuteBatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteBatch indicates an expected call of ExecuteBatch
func (mr *MockBatchInterfaceMockRecorder) ExecuteBatch() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatch", reflect.TypeOf((*MockBatchInterface)(nil).ExecuteBatch))
}

// Query mocks base method
func (m *MockBatchInterface) Query(stmt string, args ...interface{}) {
	varargs := []interface{}{stmt}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Query", varargs...)
}

// Query indicates an expected call of Query
func (mr *MockBatchInterfaceMockRecorder) Query(stmt interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{stmt}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockBatchInterface)(nil).Query), varargs...)
}
